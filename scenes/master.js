const { Telegraf, Markup, Composer, Scenes } = require("telegraf");
const bot = new Telegraf(process.env.BOT_TOKEN);
const {
  exitButton,
  citiesButtons,
  categoriesButtons,
  workVariable,
  masterButtons,
} = require("../buttons/buttons");
const { getUserRole } = require("../services/userService");
const { startMain } = require("../main-menu/mainManu");
const { masterCreate } = require("../services/userService");
const fs = require("fs");
const axios = require("axios");
const path = require("path");
const yesUndefined = (name) => (typeof name === "undefined" ? "" : name);
const categories = require("../categories/categories");

const startStep = new Composer();
startStep.on("text", async (ctx) => {
  try {
    ctx.wizard.state.data = {};
    ctx.wizard.state.data.userName = ctx.message.from.username;
    ctx.wizard.state.data.firstName = ctx.message.from.first_name;
    ctx.wizard.state.data.lastName = ctx.message.from.last_name;
    await ctx.replyWithHTML("–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤–∞—à—É –∑–∞—è–≤–∫—É", exitButton);
    await ctx.replyWithHTML(
      `<b>–í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è:</b>
<i>–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –Æ–ª—ñ—è,–†–æ–º–∞–Ω </i>`
    );
    return ctx.wizard.next();
  } catch (er) {
    console.log(er);
  }
});

const nameStep = new Composer();
nameStep.on("text", async (ctx) => {
  try {
    ctx.wizard.state.data.value1 = ctx.message.text;
    await ctx.replyWithHTML(
      `<b>–í–∫–∞–∂—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b>
<i>–£ —Ñ–æ—Ä–º–∞—Ç—ñ: +380–•–•–•–•–•–•–• </i>`,
      exitButton
    );
    return ctx.wizard.next();
  } catch (er) {
    console.log(er);
  }
});
const cityStep = new Composer();
cityStep.on("text", async (ctx) => {
  try {
    ctx.wizard.state.data.value2 = ctx.message.text;
    await ctx.replyWithHTML(`<b>–û–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:</b>`, {
      reply_markup: {
        keyboard: citiesButtons,
        resize_keyboard: true,
      },
    });
    return ctx.wizard.next();
  } catch (er) {
    console.log(er);
  }
});
const categoryStep = new Composer();
categoryStep.on("text", async (ctx) => {
  try {
    ctx.wizard.state.data.value3 = ctx.message.text;
    await ctx.replyWithHTML(`<b>–û–±–µ—Ä—ñ—Ç—å –≤–∏–¥ –≤–∞—à–∏—Ö –ø–æ—Å–ª—É–≥:</b>`, {
      reply_markup: {
        keyboard: categoriesButtons,
        resize_keyboard: true,
      },
    });

    return ctx.wizard.next();
  } catch (er) {
    console.log(er);
  }
});
const prePhotoStep = new Composer();
prePhotoStep.on("text", async (ctx) => {
  try {
    ctx.wizard.state.data.value4 = ctx.message.text;
    await ctx.replyWithHTML(
      `<b>–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –ª–∏—à–µ –û–î–ù–ï‚òùÔ∏è 1 ‚òùÔ∏è —Ñ–æ—Ç–æ:</b>
<i>–Ø–∫—â–æ –≤–∏ –∑–≤–∞–Ω—Ç–∞–∂–∏—Ç–µ 2 –∞–±–æ –±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ,–±–æ—Ç –∑—É–ø–∏–Ω–∏—Ç—å —Å–≤–æ—é —Ä–æ–±–æ—Ç—É —ñ –≤–∞–º –Ω–µ–æ–±–¥—Ö—ñ–¥–Ω–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±–æ—Ç–∞.\n–ö–æ–º–∞–Ω–¥–∞ /start \n–ó–∞–≤–∞–Ω—Ç–∞–∂—É–π—Ç–µ –ª–∏—à–µ 1 —Ñ–æ—Ç–æ
–¶–µ –º–æ–∂–µ –±—É—Ç–∏ –≤–∞—à –ª–æ–≥–æ—Ç–∏–ø, —Ñ–æ—Ç–æ –≤–∞—à–æ—ó —Å—Ç—É–¥—ñ—ó, –∞–±–æ –∂ –≤–∞—à–µ –æ—Å–æ–±–∏—Å—Ç–µ —Ñ–æ—Ç–æ.</i>`,
      exitButton
    );

    return ctx.wizard.next();
  } catch (er) {
    console.log(er);
  }
});

const photoStep = new Composer();
photoStep.on("message", async (ctx) => {
  try {
    if (!ctx.update.message.photo) {
      ctx.reply("–ó–∞–≤–∞–Ω—Ç–∞–∂—É–π—Ç–µ –ª–∏—à–µ –§–û–¢–û —É —Ñ–æ—Ä–º–∞—Ç—ñ .jpeg / .png ");
      return prePhotoStep.on("text", async (ctx) => {
        try {
          ctx.wizard.state.data.lol = ctx.message.text;
          await ctx.replyWithHTML(`<b>–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ:</b>`);
        } catch (er) {
          console.log(er);
        }
      });
    }
    ctx.reply("–î–µ –≤–∏ –ø—Ä–∞—Ü—é—î—Ç–µ ?", workVariable);
    // ctx.wizard.state.data.value5 = ctx.message.text; -- —Ñ–æ—Ç–∫–∞
    ctx.wizard.state.data.value5 = `http://localhost:5005/scenes/images/${ctx.update.message.from.id}/${ctx.update.message.from.id}.jpg`;

    const fileId = ctx.update.message.photo.pop().file_id;
    // const fileId = ctx.update.message.photo.file_id;
    const dir = `${__dirname}/images/${ctx.update.message.from.id}`;
    ctx.telegram.getFileLink(fileId).then((url) => {
      axios({ url, responseType: "stream" }).then((response) => {
        return new Promise((resolve, reject) => {
          if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir);
          }
          response.data
            .pipe(
              fs.createWriteStream(`${dir}/${ctx.update.message.from.id}.jpg`)
            )
            .on("finish", () => console.log(this))
            .on("error", (e) => console.log(e));
        });
      });
    });

    ctx.wizard.next();
  } catch (er) {
    console.log(er);
  }
});

const descriptionStep = new Composer();
descriptionStep.on("text", async (ctx) => {
  const user = ctx.message.from;
  try {
    ctx.wizard.state.data.value6 = ctx.message.text;
    const wizardData = ctx.wizard.state.data;
    await ctx.replyWithHTML(
      `<b>–†–æ–∑–∫–∞–∂—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ,—á–∏–º —Å–∞–º–µ –≤–∏ –∑–∞–π–º–∞—î—Ç–µ—Å—å.\n–¶—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—å —É –≤–∞—à—ñ–π –∞–Ω–∫–µ—Ç—ñ: </b>\n <b>–î–æ–≤—ñ–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç</b>
<i>–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ó–∞–π–º–∞—é—Å—å –∂—ñ–Ω–æ—á–∏–º–∏ —Ç–∞ —á–æ–ª–æ–≤—ñ—á–∏–º–∏ —Å—Ç—Ä–∏–∂–∫–∞–º–∏ —ñ —Ç.–¥</i>      
`,
      exitButton
    );
    ctx.wizard.next();
  } catch (er) {
    console.log(er);
  }
});

const conditionStep = new Composer();
conditionStep.on("text", async (ctx) => {
  const user = ctx.message.from;
  try {
    ctx.wizard.state.data.value7 = ctx.message.text;
    const wizardData = ctx.wizard.state.data;
    // await ctx.replyWithHTML(`<b>${wizardData.title}</b> \n${wizardData.city}`);
    await ctx.replyWithPhoto({ url: `${wizardData.value5}` });
    await ctx.replyWithHTML(
      `<b>üìì${wizardData.value1}</b>\nüì≤${wizardData.value2}\nüìç${wizardData.value3}\n‚úÇÔ∏è${wizardData.value4}\nüöò${wizardData.value6}\nüìù${wizardData.value7}`
    );
    wizardData.role = "master";
    masterCreate(user, wizardData);
    await ctx.replyWithHTML(
      `<b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞!
–ü—ñ—Å–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó,-–∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∫–∞–∑—É –∫–ª—ñ—î–Ω—Ç–∞–º.</b>`
    );
    await ctx.reply("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", masterButtons);
    return ctx.scene.leave();
  } catch (er) {
    console.log(er);
  }
});

const masterScene = new Scenes.WizardScene(
  "masterWizard",
  startStep,
  nameStep,
  cityStep,
  categoryStep,
  prePhotoStep,
  photoStep,
  descriptionStep,
  conditionStep
);

masterScene.hears("–í–∏–π—Ç–∏", (ctx) => {
  ctx.scene.leave();
  const user = ctx.message.from;
  ctx.replyWithHTML("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", {
    reply_markup: {
      keyboard: [[{ text: `‚úÇ –Ø –º–∞–π—Å—Ç–µ—Ä` }, { text: `üë© –Ø –∫–ª—ñ—î–Ω—Ç` }]],
      resize_keyboard: true,
    },
  });
});
module.exports = masterScene;
